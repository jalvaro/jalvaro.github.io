{"version":3,"sources":["assets/logo.svg","js/mobile-antennas/InfoArea.js","js/mobile-antennas/InfoMarker.js","js/mobile-antennas/MyMapComponent.js","js/mobile-antennas/MapContainer.js","js/mobile-antennas/InfoAntennasResource.js","js/mobile-antennas/MobileAntennas.js","js/Navigation.js","js/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InfoArea","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleToggleOpen","setState","isOpen","state","getDescription","properties","keys","map","description","index","react_default","a","createElement","key","onClick","antenna","style","paddingLeft","Component","InfoMarker","lib","position","marker","onCloseClick","antennas","x","InfoArea_InfoArea","MyMapComponent","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","values","markers","InfoMarker_InfoMarker","DrawingManager_default","onOverlayComplete","handleOverlayComplete","defaultDrawingMode","window","google","maps","drawing","OverlayType","RECTANGLE","defaultOptions","drawingControl","drawingControlOptions","ControlPosition","TOP_CENTER","drawingModes","evt","overlay","event","clearInstanceListeners","setMap","SWPoint","createPoint","getBounds","getSouthWest","NEPoint","getNorthEast","updateArea","point","MapContainer","mobile_antennas_MyMapComponent","googleMapURL","loadingElement","height","containerElement","mapElement","getAntennas","area","url","URL","params","lat1","lng1","lat2","lng2","forEach","searchParams","append","fetch","then","response","json","mapToMarkers","features","reduce","groupByCoordinates","acc","cur","JSON","stringify","geometry","coordinates","concat","getMarker","MobileAntennas","selectedArea","_this2","prevProps","prevState","snapshot","_this3","MapContainer_MapContainer","handler","bind","React","Home","Navigation","BrowserRouter","Link","to","Route","exact","path","component","App","className","src","logo","alt","js_Navigation","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","js_App","document","getElementById","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e1f7e759.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass InfoArea extends Component {\n    static propTypes = {\n        antenna: PropTypes.object,\n        index: PropTypes.number\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false\n        }\n    }\n\n    handleToggleOpen = () => this.setState({isOpen: !this.state.isOpen});\n\n    getDescription = properties => Object.keys(properties)\n        .map((description, index) => (\n            <div key={index}>\n                <strong>{description}:</strong> {properties[description]}\n            </div>\n        ));\n\n    render() {\n        return (\n            <div>\n                <div onClick={this.handleToggleOpen}>\n                    <strong>{(this.props.index + 1) + \". \" + this.props.antenna.properties[\"CÃ³digo\"]}</strong>\n                </div>\n                {this.state.isOpen &&\n                <div style={{paddingLeft: \"10px\"}}>\n                    {this.getDescription(this.props.antenna.properties)}\n                </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport {InfoArea};","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {InfoWindow, Marker} from \"react-google-maps\";\nimport {InfoArea} from \"./InfoArea\";\n\nclass InfoMarker extends Component {\n    static propTypes = {\n        marker: PropTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false\n        }\n    }\n\n    handleToggleOpen = () => this.setState({isOpen: !this.state.isOpen});\n\n    render() {\n        return (\n            <Marker\n                position={this.props.marker.position}\n                onClick={this.handleToggleOpen}\n            >\n                {\n                    this.state.isOpen &&\n                    <InfoWindow onCloseClick={this.handleToggleOpen}>\n                        <div>\n                            {\n                                this.props.marker.antennas.map((x, index) => (\n                                    <InfoArea key={index} antenna={x} index={index}/>\n                                ))\n                            }\n                        </div>\n                    </InfoWindow>\n                }\n            </Marker>\n        )\n    }\n}\n\nexport {InfoMarker};","/*global google*/\nimport React from 'react';\nimport {GoogleMap, withGoogleMap, withScriptjs} from \"react-google-maps\"\nimport DrawingManager from \"react-google-maps/lib/components/drawing/DrawingManager\";\nimport {InfoMarker} from \"./InfoMarker\";\n\nconst MyMapComponent = withScriptjs(withGoogleMap((props) =>\n    <div>\n        <GoogleMap\n            defaultZoom={13}\n            defaultCenter={{lat: 41.860768, lng: -3.388736}}>\n            {\n                Object.values(props.markers).map((marker, index) => (\n                    <InfoMarker\n                        key={index}\n                        marker={marker}\n                    />\n                ))\n            }\n\n            <DrawingManager\n                onOverlayComplete={handleOverlayComplete(props)}\n                defaultDrawingMode={window.google.maps.drawing.OverlayType.RECTANGLE}\n                defaultOptions={{\n                    drawingControl: true,\n                    drawingControlOptions: {\n                        position: window.google.maps.ControlPosition.TOP_CENTER,\n                        drawingModes: [\n                            window.google.maps.drawing.OverlayType.RECTANGLE\n                        ]\n                    }\n                }}\n            />\n        </GoogleMap>\n    </div>\n));\n\nconst handleOverlayComplete = props => evt => {\n    const overlay = evt.overlay; // regular Google maps API object\n\n    // Use react-google-maps instead of the created overlay object\n    google.maps.event.clearInstanceListeners(overlay);\n    overlay.setMap(null);\n\n    const SWPoint = createPoint(overlay.getBounds().getSouthWest());\n    const NEPoint = createPoint(overlay.getBounds().getNorthEast());\n\n    props.updateArea(SWPoint, NEPoint);\n};\n\nconst createPoint = point => ({\n    lat: point.lat(),\n    lng: point.lng()\n});\n\nexport default MyMapComponent;","import React, {Component} from 'react';\nimport MyMapComponent from \"./MyMapComponent\";\n\nexport default class MapContainer extends Component {\n    render() {\n        return (\n            <MyMapComponent\n                googleMapURL={\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyAD3PcPQGczmphFRsTbIb0R3RSrSw6SWA4\"}\n                loadingElement={<div style={{height: `100%`}}/>}\n                containerElement={<div style={{height: \"100%\"}}/>}\n                mapElement={<div style={{height: \"100%\"}}/>}\n                markers={this.props.markers}\n                updateArea={this.props.updateArea}\n            />\n        );\n    }\n}\n","import 'whatwg-fetch'\n\nconst getAntennas = area => {\n    const url = new URL(\"https://infoantenas.herokuapp.com/antennas\");\n    const params = {\n        lat1: area.SWPoint.lat,\n        lng1: area.SWPoint.lng,\n        lat2: area.NEPoint.lat,\n        lng2: area.NEPoint.lng,\n    };\n\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n\n    return fetch(url)\n        .then(response => response.json())\n        .then(mapToMarkers);\n};\n\nconst mapToMarkers = response => {\n    if (typeof response === 'undefined' || typeof response.features === 'undefined') {\n        return [];\n    }\n\n    return response.features.reduce(groupByCoordinates, {});\n};\n\nconst groupByCoordinates = (acc, cur) => {\n    const key = JSON.stringify(cur.geometry.coordinates);\n\n    if (acc[key]) {\n        acc[key].antennas = acc[key].antennas.concat(cur);\n    } else {\n        acc[key] = getMarker(cur);\n    }\n\n    return acc;\n};\n\nconst getMarker = x => (\n    {\n        position: {\n            lat: x.geometry.coordinates[1],\n            lng: x.geometry.coordinates[0]\n        },\n        antennas: [x]\n    });\n\nexport {getAntennas};","import React from \"react\";\nimport MapContainer from \"./MapContainer\";\nimport {getAntennas} from \"./InfoAntennasResource\";\n\n\nclass MobileAntennas extends React.Component {\n    state = {\n        selectedArea: {\n            SWPoint: {\n                lat: 41.738103675076,\n                lng: -3.6525553686015\n            },\n            NEPoint: {\n                lat: 42.044144009778,\n                lng: -3.2428779584757\n            }\n        },\n        markers: []\n    };\n\n    componentDidMount() {\n        getAntennas(this.state.selectedArea)\n            .then(markers => this.setState({markers: markers}));\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.selectedArea !== prevState.selectedArea) {\n            getAntennas(this.state.selectedArea)\n                .then(markers => this.setState({markers: markers}));\n        }\n    }\n\n    handler(SWPoint, NEPoint) {\n        this.setState({\n            selectedArea: {\n                SWPoint: SWPoint,\n                NEPoint: NEPoint\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div style={{height: \"700px\"}}>\n                <h2>Mobile Antennas</h2>\n                <MapContainer\n                    markers={this.state.markers}\n                    updateArea={this.handler.bind(this)}\n                />\n            </div>\n        );\n    }\n}\n\nexport default MobileAntennas;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport MobileAntennas from \"./mobile-antennas/MobileAntennas\";\n\nfunction Navigation() {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Home</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/mobileAntennas\">Mobile Antennas</Link>\n                    </li>\n                </ul>\n\n                <hr />\n\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/mobileAntennas\" component={MobileAntennas} />\n            </div>\n        </Router>\n    );\n}\n\nfunction Home() {\n    return (\n        <div>\n            <h2>Home</h2>\n        </div>\n    );\n}\n\nexport default Navigation;","import React, {Component} from 'react';\nimport logo from '../assets/logo.svg';\nimport '../assets/App.css';\nimport Navigation from \"./Navigation\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <h1 className=\"App-title\">Welcome to my space of creation</h1>\n                </header>\n                <p className=\"App-intro\">\n                    Some ongoing stuff:\n                </p>\n                <Navigation/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './js/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}