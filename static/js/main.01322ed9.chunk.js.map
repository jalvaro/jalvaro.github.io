{"version":3,"sources":["assets/logo.svg","js/MyMapComponent.js","js/MapContainer.js","js/MobileAntennas.js","js/Navigation.js","js/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MyMapComponent","withScriptjs","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","defaultCenter","lat","lng","markers","map","marker","index","key","position","DrawingManager_default","defaultDrawingMode","window","google","maps","drawing","OverlayType","RECTANGLE","defaultOptions","drawingControl","drawingControlOptions","ControlPosition","TOP_CENTER","drawingModes","MapContainer","state","js_MyMapComponent","googleMapURL","loadingElement","style","height","containerElement","mapElement","this","Component","MobileAntennas","MapContainer_MapContainer","Home","Navigation","BrowserRouter","Link","to","Route","exact","path","component","App","className","src","logo","alt","js_Navigation","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","js_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.01322ed9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {GoogleMap, Marker, withGoogleMap, withScriptjs} from \"react-google-maps\"\nimport DrawingManager from \"react-google-maps/lib/components/drawing/DrawingManager\";\n\nconst MyMapComponent = withScriptjs(withGoogleMap((props) =>\n    <div>\n        <GoogleMap\n            defaultZoom={13}\n            defaultCenter={{lat: 41.860768, lng: -3.388736}}>\n            {\n                props.markers.map((marker, index) => (\n                    <Marker key={index} position={marker.position}/>\n                ))\n            }\n\n            <DrawingManager\n                defaultDrawingMode={window.google.maps.drawing.OverlayType.RECTANGLE}\n                defaultOptions={{\n                    drawingControl: true,\n                    drawingControlOptions: {\n                        position: window.google.maps.ControlPosition.TOP_CENTER,\n                        drawingModes: [\n                            window.google.maps.drawing.OverlayType.RECTANGLE\n                        ],\n                    }\n                }}\n            />\n        </GoogleMap>\n    </div>\n));\n\n\n/*<Rectangle\n    bounds={{\n        north: 41.960768,\n        south: 41.860768,\n        east: -3.388736,\n        west: -3.888736\n    }}\n    options={{\n        fillColor: `red`,\n        fillOpacity: 0.20,\n        strokeColor: `red`,\n        strokeOpacity: 1,\n        strokeWeight: 1,\n    }}\n/>*/\nexport default MyMapComponent;","import React, {Component} from 'react';\nimport MyMapComponent from \"./MyMapComponent\";\n\nexport default class MapContainer extends Component {\n    state = {\n        markers: [\n            /*{\n                position: {\n                    lat: 41.860768,\n                    lng: -3.388736\n                }\n            }*/\n        ]\n    };\n\n    render() {\n        return (\n            <MyMapComponent\n                googleMapURL={\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyAD3PcPQGczmphFRsTbIb0R3RSrSw6SWA4\"}\n                loadingElement={<div style={{height: `100%`}}/>}\n                containerElement={<div style={{height: \"100%\"}}/>}\n                mapElement={<div style={{height: \"100%\"}}/>}\n                markers={this.state.markers}\n            />\n        );\n    }\n}","import React from \"react\";\nimport MapContainer from \"./MapContainer\";\n\n\nconst MobileAntennas = () => (\n    <div style={{height: \"700px\"}}>\n        <h2>Mobile Antennas</h2>\n        <MapContainer/>\n    </div>\n);\n\nexport default MobileAntennas;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport MobileAntennas from \"./MobileAntennas\";\n\nfunction Navigation() {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Home</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/mobileAntennas\">Mobile Antennas</Link>\n                    </li>\n                </ul>\n\n                <hr />\n\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/mobileAntennas\" component={MobileAntennas} />\n            </div>\n        </Router>\n    );\n}\n\nfunction Home() {\n    return (\n        <div>\n            <h2>Home</h2>\n        </div>\n    );\n}\n\nexport default Navigation;","import React, {Component} from 'react';\nimport logo from '../assets/logo.svg';\nimport '../assets/App.css';\nimport Navigation from \"./Navigation\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <h1 className=\"App-title\">Welcome to my space of creation</h1>\n                </header>\n                <p className=\"App-intro\">\n                    Some ongoing stuff:\n                </p>\n                <Navigation/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './js/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}