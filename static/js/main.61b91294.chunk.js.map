{"version":3,"sources":["assets/logo.svg","js/mobile-antennas/InfoMarker.js","js/mobile-antennas/MyMapComponent.js","js/mobile-antennas/MapContainer.js","js/mobile-antennas/InfoAntennasResource.js","js/mobile-antennas/MobileAntennas.js","js/Navigation.js","js/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InfoMarker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleToggleOpen","setState","isOpen","state","getDescription","properties","keys","map","descr","index","react_default","a","createElement","key","lib","position","antenna","onClick","onCloseClick","React","Component","MyMapComponent","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","markers","InfoMarker_InfoMarker","DrawingManager_default","defaultDrawingMode","window","google","maps","drawing","OverlayType","RECTANGLE","defaultOptions","drawingControl","drawingControlOptions","ControlPosition","TOP_CENTER","drawingModes","MapContainer","mobile_antennas_MyMapComponent","googleMapURL","loadingElement","style","height","containerElement","mapElement","antennas","mapToAntennas","response","features","x","geometry","coordinates","MobileAntennas","selectedArea","pointA","pointB","_this2","area","url","URL","params","lat1","lng1","lat2","lng2","forEach","searchParams","append","fetch","then","json","getAntennas","MapContainer_MapContainer","Home","Navigation","BrowserRouter","Link","to","Route","exact","path","component","App","className","src","logo","alt","js_Navigation","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","js_App","document","getElementById","process","origin","addEventListener","concat","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kUCIlCC,cAKF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,iBAAmB,kBAAMP,EAAKQ,SAAS,CAACC,QAAST,EAAKU,MAAMD,UARzCT,EAUnBW,eAAiB,SAAAC,GAAU,OAAIX,OAAOY,KAAKD,GACtCE,IAAI,SAACC,EAAOC,GAAR,OAAkBC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,GAAOC,EAAAC,EAAAC,cAAA,cAASJ,EAAT,KAAjB,IAA4CH,EAAWG,GAAvD,QARvBf,EAAKU,MAAQ,CACTD,QAAQ,GAJGT,wEAcf,OACIiB,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACIC,SAAUnB,KAAKJ,MAAMwB,QAAQD,SAC7BE,QAASrB,KAAKI,kBAGVJ,KAAKO,MAAMD,QACXQ,EAAAC,EAAAC,cAACE,EAAA,WAAD,CAAYI,aAActB,KAAKI,kBAC3BU,EAAAC,EAAAC,cAAA,WAAMhB,KAAKQ,eAAeR,KAAKJ,MAAMwB,QAAQX,sBA3B5Cc,IAAMC,WC+BhBC,EA9BQC,uBAAaC,wBAAc,SAAC/B,GAAD,OAC9CkB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACE,EAAA,UAAD,CACIU,YAAa,GACbC,cAAe,CAACC,IAAK,UAAWC,KAAM,WAElCnC,EAAMoC,QAAQrB,IAAI,SAACS,EAASP,GAAV,OACdC,EAAAC,EAAAC,cAACiB,EAAD,CACIhB,IAAKJ,EACLO,QAASA,MAKrBN,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACIoB,mBAAoBC,OAAOC,OAAOC,KAAKC,QAAQC,YAAYC,UAC3DC,eAAgB,CACZC,gBAAgB,EAChBC,sBAAuB,CACnBzB,SAAUiB,OAAOC,OAAOC,KAAKO,gBAAgBC,WAC7CC,aAAc,CACVX,OAAOC,OAAOC,KAAKC,QAAQC,YAAYC,oBCtB9CO,mLAMb,OACIlC,EAAAC,EAAAC,cAACiC,EAAD,CACIC,aAAc,gIACdC,eAAgBrC,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAACC,OAAM,UACnCC,iBAAkBxC,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAACC,OAAQ,UACvCE,WAAYzC,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAACC,OAAQ,UACjCrB,QAAShC,KAAKJ,MAAM4D,kBAZMhC,aCcpCiC,UAAgB,SAAAC,GAClB,MAAwB,qBAAbA,GAAyD,qBAAtBA,EAASC,SAC5C,GAGJD,EAASC,SAAShD,IAAI,SAAAiD,GAAC,MAAK,CAC/BzC,SAAU,CACNW,IAAK8B,EAAEC,SAASC,YAAY,GAC5B/B,IAAK6B,EAAEC,SAASC,YAAY,IAEhCrD,WAAYmD,EAAEnD,gBCOPsD,6MA7BXxD,MAAQ,CACJyD,aAAc,CACVC,OAAQ,CACJnC,IAAK,gBACLC,KAAM,iBAEVmC,OAAQ,CACJpC,IAAK,gBACLC,KAAM,kBAGdyB,SAAU,uFAGM,IAAAW,EAAAnE,MDlBJ,SAAAoE,GAChB,IAAMC,EAAM,IAAIC,IAAI,8CACdC,EAAS,CACXC,KAAMJ,EAAKH,OAAOnC,IAClB2C,KAAML,EAAKH,OAAOlC,IAClB2C,KAAMN,EAAKF,OAAOpC,IAClB6C,KAAMP,EAAKF,OAAOnC,KAKtB,OAFAjC,OAAOY,KAAK6D,GAAQK,QAAQ,SAAA3D,GAAG,OAAIoD,EAAIQ,aAAaC,OAAO7D,EAAKsD,EAAOtD,MAEhE8D,MAAMV,GACRW,KAAK,SAAAtB,GAAQ,OAAIA,EAASuB,SAC1BD,KAAKvB,ICMNyB,CAAYlF,KAAKO,MAAMyD,cAClBgB,KAAK,SAAAxB,GAAQ,OAAIW,EAAK9D,SAAS,CAACmD,SAAUA,uCAI/C,OACI1C,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAACC,OAAQ,UACjBvC,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACmE,EAAD,CAAc3B,SAAUxD,KAAKO,MAAMiD,mBAxBtBjC,IAAMC,WCqBnC,SAAS4D,IACL,OACItE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBAKGqE,MA9Bf,WACI,OACIvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,KACIxE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEJ1E,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAMC,GAAG,mBAAT,qBAIR1E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjCtE,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAOE,KAAK,kBAAkBC,UAAW7B,OCE1C8B,mLAfP,OACI/E,EAAAC,EAAAC,cAAA,OAAK8E,UAAU,OACXhF,EAAAC,EAAAC,cAAA,UAAQ8E,UAAU,cACdhF,EAAAC,EAAAC,cAAA,OAAK+E,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCnF,EAAAC,EAAAC,cAAA,MAAI8E,UAAU,aAAd,oCAEJhF,EAAAC,EAAAC,cAAA,KAAG8E,UAAU,aAAb,uBAGAhF,EAAAC,EAAAC,cAACkF,EAAD,cAXE1E,aCKZ2E,EAAcC,QACW,cAA7BhE,OAAOiE,SAASC,UAEe,UAA7BlE,OAAOiE,SAASC,UAEhBlE,OAAOiE,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTzB,KAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxG,QACfmG,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAO1G,EAAAC,EAAAC,cAACyG,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIpC,IAAIsD,GAAwBxF,OAAOiE,UAC3CwB,SAAWzF,OAAOiE,SAASwB,OAIvC,OAGFzF,OAAO0F,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAsB,OAAMH,GAAN,sBAEPzB,GAiDV,SAAiCM,GAE/B1B,MAAM0B,GACHzB,KAAK,SAAAtB,GAGkB,MAApBA,EAASsE,SACuD,IAAhEtE,EAASuE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMpD,KAAK,SAAA6B,GACjCA,EAAawB,aAAarD,KAAK,WAC7B5C,OAAOiE,SAASiC,aAKpB9B,EAAgBC,KAGnBY,MAAM,WACLF,QAAQC,IACN,mEArEAmB,CAAwB9B,GAIxBC,UAAUC,cAAcyB,MAAMpD,KAAK,WACjCmC,QAAQC,IACN,+GAMJZ,EAAgBC,MCzCxB+B","file":"static/js/main.61b91294.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {InfoWindow, Marker} from \"react-google-maps\";\n\nclass InfoMarker extends React.Component {\n    static propTypes = {\n        antenna: PropTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false\n        }\n    }\n\n    handleToggleOpen = () => this.setState({isOpen: !this.state.isOpen});\n\n    getDescription = properties => Object.keys(properties)\n        .map((descr, index) => <div key={index}><strong>{descr}:</strong> {properties[descr]} </div>);\n\n    render() {\n        return (\n            <Marker\n                position={this.props.antenna.position}\n                onClick={this.handleToggleOpen}\n            >\n                {\n                    this.state.isOpen &&\n                    <InfoWindow onCloseClick={this.handleToggleOpen}>\n                        <div>{this.getDescription(this.props.antenna.properties)}</div>\n                    </InfoWindow>\n                }\n            </Marker>\n        )\n    }\n}\n\nexport {InfoMarker};","import React from 'react';\nimport {GoogleMap, withGoogleMap, withScriptjs} from \"react-google-maps\"\nimport DrawingManager from \"react-google-maps/lib/components/drawing/DrawingManager\";\nimport {InfoMarker} from \"./InfoMarker\";\n\nconst MyMapComponent = withScriptjs(withGoogleMap((props) =>\n    <div>\n        <GoogleMap\n            defaultZoom={13}\n            defaultCenter={{lat: 41.860768, lng: -3.388736}}>\n            {\n                props.markers.map((antenna, index) => (\n                    <InfoMarker\n                        key={index}\n                        antenna={antenna}\n                    />\n                ))\n            }\n\n            <DrawingManager\n                defaultDrawingMode={window.google.maps.drawing.OverlayType.RECTANGLE}\n                defaultOptions={{\n                    drawingControl: true,\n                    drawingControlOptions: {\n                        position: window.google.maps.ControlPosition.TOP_CENTER,\n                        drawingModes: [\n                            window.google.maps.drawing.OverlayType.RECTANGLE\n                        ],\n                    }\n                }}\n            />\n        </GoogleMap>\n    </div>\n));\n\nexport default MyMapComponent;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'\nimport MyMapComponent from \"./MyMapComponent\";\n\nexport default class MapContainer extends Component {\n    static propTypes = {\n        antennas: PropTypes.array\n    };\n\n    render() {\n        return (\n            <MyMapComponent\n                googleMapURL={\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyAD3PcPQGczmphFRsTbIb0R3RSrSw6SWA4\"}\n                loadingElement={<div style={{height: `100%`}}/>}\n                containerElement={<div style={{height: \"100%\"}}/>}\n                mapElement={<div style={{height: \"100%\"}}/>}\n                markers={this.props.antennas}\n            />\n        );\n    }\n}\n","import 'whatwg-fetch'\n\nconst getAntennas = area => {\n    const url = new URL(\"https://infoantenas.herokuapp.com/antennas\");\n    const params = {\n        lat1: area.pointA.lat,\n        lng1: area.pointA.lng,\n        lat2: area.pointB.lat,\n        lng2: area.pointB.lng,\n    };\n\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n\n    return fetch(url)\n        .then(response => response.json())\n        .then(mapToAntennas);\n};\n\nconst mapToAntennas = response => {\n    if (typeof response === 'undefined' || typeof response.features === 'undefined') {\n        return [];\n    }\n\n    return response.features.map(x => ({\n        position: {\n            lat: x.geometry.coordinates[1],\n            lng: x.geometry.coordinates[0]\n        },\n        properties: x.properties,\n    }));\n};\n\nexport {getAntennas};","import React from \"react\";\nimport MapContainer from \"./MapContainer\";\nimport {getAntennas} from \"./InfoAntennasResource\";\n\n\nclass MobileAntennas extends React.Component {\n    state = {\n        selectedArea: {\n            pointA: {\n                lat: 41.738103675076,\n                lng: -3.6525553686015\n            },\n            pointB: {\n                lat: 42.044144009778,\n                lng: -3.2428779584757\n            }\n        },\n        antennas: []\n    };\n\n    componentDidMount() {\n        getAntennas(this.state.selectedArea)\n            .then(antennas => this.setState({antennas: antennas}));\n    }\n\n    render() {\n        return (\n            <div style={{height: \"700px\"}}>\n                <h2>Mobile Antennas</h2>\n                <MapContainer antennas={this.state.antennas}/>\n            </div>\n        );\n    }\n}\n\nexport default MobileAntennas;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport MobileAntennas from \"./mobile-antennas/MobileAntennas\";\n\nfunction Navigation() {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Home</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/mobileAntennas\">Mobile Antennas</Link>\n                    </li>\n                </ul>\n\n                <hr />\n\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/mobileAntennas\" component={MobileAntennas} />\n            </div>\n        </Router>\n    );\n}\n\nfunction Home() {\n    return (\n        <div>\n            <h2>Home</h2>\n        </div>\n    );\n}\n\nexport default Navigation;","import React, {Component} from 'react';\nimport logo from '../assets/logo.svg';\nimport '../assets/App.css';\nimport Navigation from \"./Navigation\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <h1 className=\"App-title\">Welcome to my space of creation</h1>\n                </header>\n                <p className=\"App-intro\">\n                    Some ongoing stuff:\n                </p>\n                <Navigation/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './js/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}